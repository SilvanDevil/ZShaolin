#!/bin/zsh

# {{{ LICENSE

# Copyright (C) 2012 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# }}}

# {{{ GLOBAL VARIABLES

# ZShaolin system build and basic configuration

# configure the target
TARGET=arm-dyne-linux-gnueabi
# same value should be the bootstrap target

# the location inside android
APKPATH=/data/data/org.dyne.zshaolin

# where are we
ZHOME=`pwd`

# toolchain full path
TOOLCHAIN=$ZHOME/bootstrap/x-tools

# configure the install prefix
PREFIX=$ZHOME/sysroot

# configure the compile flags
CFLAGS="-Os -O2 -static -static-libgcc -mfloat-abi=softfp -march=armv7-a -mtune=cortex-a8 -I$TOOLCHAIN/$TARGET/sysroot/usr/include -I$PREFIX/include"
CPPFLAGS="-I$PREFIX/include"
CXXFLAGS=$CFLAGS
LDFLAGS="-static -static-libgcc -L$TOOLCHAIN/$TARGET/sysroot/lib -L$TOOLCHAIN/$TARGET/sysroot/usr/lib -L$PREFIX/lib -L$PREFIX/usr/lib"

# }}}


# make sure the toolchain exists in /usr
if ! [ -r $TOOLCHAIN/bin/$TARGET-gcc ]; then
    echo "error: toolchain not found: $TARGET"
    echo "first you need to bootstrap."
#    return 1
fi

echo "Compiling ZShaolin system root"
echo "Target:    $TARGET"
echo "Toolchain: $TOOLCHAIN"
echo "Install:   $PREFIX"
echo "CFLAGS:    $CFLAGS"
echo "LDFLAGS:   $LDFLAGS"

echo "Command:   $@"

PATH="$TOOLCHAIN/bin:$PATH"

enter() {
    if ! [ -r $1conf.zsh ]; then
	echo "error: build directory misses configuration file: $1conf.zsh"
	return 1
    fi
    cd $1; echo "Entered `pwd`"
    shift
    source conf.zsh
    cd -
}
    
compile() {
    if [ -r $1.done ]; then
	echo "$1.done :: already built, skipping compilation"
	return 1
    fi
    echo "Compiling $1"
    if ! [ -r $1 ]; then
    	echo "source directory $1 not found, skipping compilation"
    	return 1
    fi
    cd $1

    if [ -r configure ]; then

	case $2 in
	    default)
		confflags="--host=$TARGET --prefix=$PREFIX"
		;;
	    check)
		return 0
		;;
	    *)
		confflags="$2"
		echo "configure = $confflags"
	esac
	
	extraflags="$3"
	if [ "$extraflags" != "" ]; then
	    echo "extra flags = $extraflags"
	fi

	CC="$TARGET-gcc" AR="$TARGET-ar" RANLIB="$TARGET-ranlib" \
	    CFLAGS="$CFLAGS $extracflags" \
	    CPPFLAGS="$CPPFLAGS" \
	    CXXFLAGS="$CXXFLAGS" \
	    LDFLAGS="$LDFLAGS" \
	    ./configure ${=confflags} ${=extraflags} >> ../$LOGS
	
	if [ $? != 0 ]; then
	    echo "error: $1 cannot configure, skipping compilation"; cd -
	    return 1
	fi
	
    fi

    CC="$TARGET-gcc" AR="$TARGET-ar" RANLIB="$TARGET-ranlib" \
	CFLAGS="$CFLAGS $extracflags" \
	CPPFLAGS="$CPPFLAGS" \
	CXXFLAGS="$CXXFLAGS" \
	LDFLAGS="$LDFLAGS" \
	make V=1 >> ../$LOGS
    if [ $? != 0 ]; then
	echo "error: $1 cannot make, aborted compilation"; cd -
	return 1
    fi

    echo $@ | grep noinstall > /dev/null
    if [ $? != 0 ]; then
	CC="$TARGET-gcc" AR="$TARGET-ar" RANLIB="$TARGET-ranlib" \
	    CFLAGS="$CFLAGS $extracflags" \
	    CPPFLAGS="$CPPFLAGS" \
	    CXXFLAGS="$CXXFLAGS" \
	    LDFLAGS="$LDFLAGS" \
	    make install >> ../$LOGS
	if [ $? != 0 ]; then
	    echo "error: $1 cannot make install, check permissions"; cd -
	    return 1
	fi
    fi

    echo "done compiling $1"
    cd -
    touch $1.done
    return 0
}

clean() {
    if ! [ -r $1 ]; then return 0; fi
    echo "Cleaning $1"
    rm -f $1.done
    cd $1
    make clean >> ../$LOGS
    cd - > /dev/null
}


case "$1" in
    build)
	enter build/ $@
       	;;
    pack)
	enter etc/ $@
	enter pack/ $@
	;;
    clean)
	enter build/ $@
	;;
    test)
	ZHOME=$ZHOME zsh etc/zlogin
	;;
    env)
	echo "initializing env"
	export ZHOME TARGET TOOLCHAIN
	export PREFIX PATH CFLAGS
	export CPPFLAGS CXXFLAGS LDFLAGS
	zsh
	return
	;;
    help|-h)
	echo "No help. We're all on our own, for now."
	;;
    *)
	echo "Command not found: $@"

esac

