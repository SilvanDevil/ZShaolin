#!/bin/zsh

# {{{ LICENSE

# Copyright (C) 2012 Denis Roio <jaromil@dyne.org>
#
# This source  code is free  software; you can redistribute  it and/or
# modify it under the terms of  the GNU Public License as published by
# the Free  Software Foundation; either  version 3 of the  License, or
# (at your option) any later version.
#
# This source code is distributed in  the hope that it will be useful,
# but  WITHOUT ANY  WARRANTY;  without even  the  implied warranty  of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# Please refer to the GNU Public License for more details.
#
# You should have received a copy of the GNU Public License along with
# this source code; if not, write to:
# Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

# }}}

# {{{ GLOBAL VARIABLES

# ZShaolin system build and basic configuration

QUIET=0
DEBUG=0

# configure the target
TARGET=arm-dyne-linux-gnueabi
#TARGET=arm-linux-androideabi
# same value should be the bootstrap target

# the location inside android
APKPATH=/data/data/org.dyne.zshaolin

# where are we
ZHOME=`pwd`

# toolchain full path
#TOOLCHAIN=$ZHOME/toolchains/google-ndk
TOOLCHAIN=$ZHOME/toolchains/crosstool-ng/x-tools

# configure the install prefix
PREFIX=$ZHOME/sysroot

OPTIMIZATIONS="-Os -O2"

## Architecture compiler flags 

# safest for most devices
ARCH="-marm -march=armv5 -mfloat-abi=softfp"
# more recent cortex-8:
# ARCH="-mfloat-abi=softfp -march=armv7-a -mtune=cortex-a8"


REPO="http://files.dyne.org/zshaolin/sources"
# }}}

ANDROID_NDK="/srv/android/android-ndk-r8b"
ANDROID_PLATFORM="android-8/arch-arm"
ANDROID_TOOLCHAIN="arm-linux-androideabi-4.6/prebuilt/linux-x86"
ANDROID_CFLAGS="-DANDROID -D__ANDROID__ -DSK_RELEASE -nostdlib -fpic -fno-short-enums -fgcse-after-reload -frename-registers"
ANDROID_LDFLAGS="-L${ANDROID_NDK}/platforms/${ANDROID_PLATFORM}/usr/lib -Xlinker -z -Xlinker muldefs -nostdlib -Bdynamic -Xlinker -dynamic-linker -Xlinker /system/bin/linker -Xlinker -z -Xlinker nocopyreloc -Xlinker --no-undefined $ANDROID_NDK/platforms/$ANDROID_PLATFORM/usr/lib/crtbegin_dynamic.o $ANDROID_NDK/platforms/$ANDROID_PLATFORM/usr/lib/crtend_android.o -ldl -lm -lc -lgcc"

# configure the compile flags
CFLAGS="-static -static-libgcc $OPTIMIZATIONS $ARCH -I$TOOLCHAIN/$TARGET/sysroot/usr/include -I$PREFIX/include"
#CFLAGS="$OPTIMIZATIONS $ARCH -I$TOOLCHAIN/$TARGET/sysroot/usr/include -I$PREFIX/include $ANDROID_CFLAGS"
CPPFLAGS="-I$PREFIX/include"
CXXFLAGS=$CFLAGS
LDFLAGS="-static -static-libgcc -L$TOOLCHAIN/$TARGET/sysroot/lib -L$TOOLCHAIN/$TARGET/sysroot/usr/lib -L$PREFIX/lib -L$PREFIX/usr/lib"
# LDFLAGS="-L$TOOLCHAIN/$TARGET/sysroot/lib -L$TOOLCHAIN/$TARGET/sysroot/usr/lib -L$PREFIX/lib -L$PREFIX/usr/lib"
# LDFLAGS="$ANDROID_LDFLAGS -L$PREFIX/lib -L$PREFIX/usr/lib"
# PATH="$PATH:$ANDROID_NDK/toolchains/$ANDROID_TOOLCHAIN/bin"
PATH="$TOOLCHAIN/bin:$PATH"

autoload colors; colors
# standard output message routines
# it's always useful to wrap them, in case we change behaviour later
notice() { if [[ $QUIET == 0 ]]; then print "$fg_bold[green][*]$fg_no_bold[default] $1" >&2; fi }
error()  { if [[ $QUIET == 0 ]]; then print "$fg[red][!]$fg[default] $1" >&2; fi }
func()   { if [[ $DEBUG == 1 ]]; then print "$fg[blue][D]$fg[default] $1" >&2; fi }
act()    {
    if [[ $QUIET == 0 ]]; then
	if [ "$1" = "-n" ]; then
	    print -n "$fg_bold[white] . $fg_no_bold[default] $2" >&2;
	else
	    print "$fg_bold[white] . $fg_no_bold[default] $1" >&2;
	fi
    fi
}



# make sure the toolchain exists in /usr
if ! [ -r $TOOLCHAIN/bin/$TARGET-gcc ]; then
    error "error: toolchain not found: $TOOLCHAIN/bin/$TARGET-gcc"
    error "first you need to bootstrap."
#    return 1
fi

notice "ZShaolin build system"
act "Target:    $TARGET"
act "Toolchain: $TOOLCHAIN"
act "Install:   $PREFIX"
func "CFLAGS:    $CFLAGS"
func "LDFLAGS:   $LDFLAGS"
func "Command:   ${=@}"

## make sure basic directories exist
mkdir -p $PREFIX/sbin
mkdir -p $PREFIX/bin


enter() {
    if ! [ -r $1/conf.zsh ]; then
	error "build directory misses configuration file: $1/conf.zsh"
	return 1
    fi
    pushd $1
    act "Enter `pwd`"
    shift
    source conf.zsh
    popd
}

# TODO: clean_sources
prepare_sources() {
    # look for a file names "Sources", download and decompress entries
    # format of file: name version compression (complete filename when merged)
    { test -r Sources } || {
	error "Sources not found, nothing to build here"
	return 1
    }
    for src in `cat Sources | awk '
/^#/ {next}
/^./ { print $1 ";" $2 ";" $3 }'`; do
	name="${src[(ws:;:)1]}"
	ver="${src[(ws:;:)2]}"
	arch="${src[(ws:;:)3]}"
	file="${name}${ver}${arch}"
	func "preparing source for ${name}${ver}"
	# download the file
	{ test -r ${file} } || {
	    act "downloading ${file}"
	    wget ${REPO}/${file} >> $LOGS
	}
	# decompress the file
	{ test -r ${name} } || {
	    act "decompressing in ${name}"
	    case $arch in
		.tar.gz)  tar xfz ${file} ;;
		.tar.bz2) tar xfj ${file} ;;
		*) error "compression not supported: $arch"
	    esac
	    mv ${name}${ver} ${name}
	}
	notice "${name} ready"
    done
}

compile() {
    if [ -r $1.done ]; then
	act "$1 already built, skipping compilation"
	return 1
    fi
    act "compiling $1" | tee -a ../$LOGS
    if ! [ -r $1 ]; then
    	error "source directory $1 not found, skipping compilation"
    	return 1
    fi
    pushd $1

    { test -r configure } && {

	case $2 in
	    default)
		confflags="--host=$TARGET --prefix=$PREFIX"
		;;
	    check)
		return 0
		;;
	    *)
		confflags="$2"
		act "configure = $confflags"
	esac
	
	extraflags="$3"
	if [ "$extraflags" != "" ]; then
	    act "extra flags = $extraflags"
	fi

	CC="$TARGET-gcc" AR="$TARGET-ar" RANLIB="$TARGET-ranlib" LD="$TARGET-ld" \
	    CFLAGS="$CFLAGS $extracflags" \
	    CPPFLAGS="$CPPFLAGS" \
	    CXXFLAGS="$CXXFLAGS" \
	    LDFLAGS="$LDFLAGS" \
	    ./configure ${=confflags} ${=extraflags} >> ../$LOGS
	
	if [ $? != 0 ]; then
	    error "error: $1 cannot configure, skipping compilation"
	    popd
	    return 1
	fi
	
    }

    # check nomake flag
    echo $@ | grep nomake > /dev/null
    if [ $? != 0 ]; then
	CC="$TARGET-gcc" AR="$TARGET-ar" RANLIB="$TARGET-ranlib" LD="$TARGET-ld" \
	    CFLAGS="$CFLAGS $extracflags" \
	    CPPFLAGS="$CPPFLAGS" \
	    CXXFLAGS="$CXXFLAGS" \
	    LDFLAGS="$LDFLAGS" \
	    make V=1 >> ../$LOGS
	if [ $? != 0 ]; then
	    error "error: $1 cannot make, aborted compilation"
	    popd
	    return 1
	fi
    fi # nomake

    notice "$1 compiled"
    popd
    touch $1.done
    return 0
}

zinstall() {	
    { test ! -r $1.done } && {
	error "$1 not yet built, skipping installation"
	return 1 }

    { test -r $1.installed } && {
	error "$1 is already installed, skipping"
	return 1 }

    act "installing $1" | tee -a ../$LOGS

    PREFIX="$PREFIX" \
	make -C $1 install >> ../$LOGS
    if [ $? != 0 ]; then
	error "error: $1 cannot make install, check permissions"
	return 1
    fi

    notice "$1 installed"
    touch ${1}.installed
    return 0
}

clean() {
    if ! [ -r $1 ]; then return 0; fi
    act "cleaning $1"
    rm -f *.done *.installed
    notice "$1 cleaned"
}


case "$1" in
    build)
	enter build/ ${=@}
       	;;
    pack)
	enter pack/ ${=@}
	;;
    clean)
	pushd build/${2}
	clean
	popd
	;;
    test)
	ZHOME=$ZHOME zsh etc/zlogin
	;;
    env)
	notice "Initializing env"
	export ZHOME TARGET TOOLCHAIN
	export PREFIX PATH CFLAGS
	export CPPFLAGS CXXFLAGS LDFLAGS
	act "PATH: $PATH"
	act "CFLAGS: $CFLAGS"
	act "LDFLAGS: $LDFLAGS"
	;;
    source)
	return ;;
    help|-h)
	error "No help. We're all on our own, for now."
	;;
    "")
	error "No command specified, see help" ;;
    *)
	error "Command not found: $@" ;;

esac

